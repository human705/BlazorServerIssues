@layout EmptyLayout
@page "/login"
@using BlazorServerAuthIssue.AuthServices
@using BlazorServerAuthIssue.Models

@inject NavigationManager _navManager
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject IConfiguration _config
@inject ILoginService _loginService

<PageTitle>Log In page</PageTitle>

@if (@_config.GetSection("MyAppSettings").GetSection("ENV").Value != "PRODUCTION")
{
    <div class="card card-body bg-danger mx-5 my-5">
        <h1 class="text-center">Log in to @_config.GetSection("MyAppSettings").GetSection("ENV").Value </h1>
    </div>
}
else
{
    <div class="container">
        <div class="row mx-5 my-5">
            <div class="col-12">
                <img class="mx-auto d-block" max-width=50% height=65% src="images/ddc-logo.png">
            </div>
        </div>
    </div>
}

@if (showAuthError)
{
    <div class="alert alert-danger" role="alert">
        <p>@authErrorText</p>
    </div>
}

<EditForm Model="_model" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mx-5">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="UserName" class="col-md-2 col-form-label">Username:</label>
        <div class="col-md-10">
            <InputText id="UserName" class="form-control" @bind-Value="_model.UserName" />
            <ValidationMessage For="@(() => _model.UserName)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="Password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
            <InputText type="password" id="Password" class="form-control" @bind-Value="_model.Password" />
            <ValidationMessage For="@(() => _model.Password)" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Log In</button>
        </div>
    </div>

</EditForm>



@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    private UserPassAuthenticationModel _model = new();

    private bool showAuthError = false;
    private string authErrorText = "";
    private HttpClient _httpClient = new HttpClient();

    private async Task ExecuteLogin()
    {
        try
        {
            showAuthError = false;
            UserModel loggedInUser;
            string userToken = string.Empty;

            //Look for a token
            string existingToken = await _localStorage.GetItemAsync<string>("jwt_token");

            if (existingToken != null)
            {
                Log.Information("Token found in local storage! Validating...");
                loggedInUser = await _loginService.ValidateUserByJwt(existingToken);
            }
            else
            {
                Log.Information("No Token found in local storage! Validating credentials!");
                userToken = await _loginService.ValidateUserByPassword(_model.UserName, _model.Password);
                if (userToken != string.Empty)
                {
                    await _localStorage.SetItemAsync("jwt_token", userToken);
                    if (@_config.GetSection("MyAppSettings").GetSection("AdminStartUrl").Value != string.Empty)
                    {
                        _navManager.NavigateTo(@_config.GetSection("MyAppSettings").GetSection("AdminStartUrl").Value, true);
                        Log.Information($"User {_model.UserName} authenticate with creds!");
                    }
                    else
                    {
                        _navManager.NavigateTo("/", true);
                        Log.Information($"Admin URL for User {_model.UserName} failed!");
                    }
                }
                else
                {
                    authErrorText = "Error logging in. Try again!";
                    showAuthError = true;
                    Log.Warning($"User {_model.UserName} failed to authenticate!!!");
                }
            }

        }
        catch (Exception ex)
        {
            Log.Fatal($"Error : {ex.ToString()} ");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        try
        {
            if (user.Identity.IsAuthenticated)
            {
                Log.Information($"User {user.Identity.Name} Authenticated!!!! ===> Login.Razor .");
                if (@_config.GetSection("MyAppSettings").GetSection("AdminStartUrl").Value != string.Empty)
                {
                    _navManager.NavigateTo(@_config.GetSection("MyAppSettings").GetSection("AdminStartUrl").Value, true);
                    Log.Information($"User {_model.UserName} authenticate with creds!");
                }
                //else
                //{
                //    _navManager.NavigateTo("/", true);
                //    Log.Information($"Admin URL for User {_model.UserName} failed!");
                //}
            }
        }
        catch (Exception ex)
        {
            Log.Error("User Authentication state error while trying to login.");
        }
    }
}